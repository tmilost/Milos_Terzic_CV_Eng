{"version":3,"sources":["assets/walkingVector/0.jpg","assets/walkingVector/1.jpg","assets/walkingVector/2.jpg","assets/walkingVector/3.jpg","assets/walkingVector/4.jpg","assets/walkingVector/5.jpg","assets/walkingVector/6.jpg","assets/walkingVector/7.jpg","assets/walkingVector/8.jpg","assets/PixelPc.png","assets/PixelCup.png","assets/Plant.gif","assets/paris_evening.gif","assets/CVlogo.png","assets/LinkedIn.png","assets/gitHubLogo.png","assets/instagramLogo.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","countAvatar","avatarSrcAll","logo1","logo2","logo3","logo4","logo5","logo6","logo7","logo8","logo9","avatarSrc","App","props","instagramImageClick","window","open","gitHubImageClick","linkedinLink","state","avatarState","console","log","this","setState","setInterval","tick","clearInterval","className","src","outSide","alt","plant","pixelPc","pixelCup","LinkedIn","onClick","gitHubLogo","cvlogo","instagramLogo","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,+B,oBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,qdCqBvCC,G,MAAc,GACdC,EAAe,CACjBC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAEEC,EAAYT,IAwIDU,E,kDApGb,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAsBRC,oBAAsB,WACpBC,OAAOC,KAAK,qCAAsC,WAxB5B,EA2BxBC,iBAAmB,WACjBF,OAAOC,KAAK,6BAA8B,WA5BpB,EA+BxBE,aAAe,WACbH,OAAOC,KACL,sDACA,WAhCF,EAAKG,MAAQ,CACXC,aAAa,GAHO,E,mDAOtBC,QAAQC,IAAIX,GACZY,KAAKC,SAAS,CAAEJ,aAAa,IAC7BT,EAAYV,EAAaD,KACvBA,EACgB,IAChBA,EAAc,K,0CAIG,IAAD,OAClByB,aAAY,kBAAM,EAAKC,SAAQ,O,6CAI/BC,kB,+BAiBA,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKC,IAAKC,IAASF,UAAU,UAAUG,IAAI,UAgB3C,yBAAKF,IAAKG,IAAOJ,UAAU,QAAQG,IAAI,YACvC,yBAAKF,IAAKI,IAASL,UAAU,UAAUG,IAAI,YAC3C,yBAAKF,IAAKK,IAAUN,UAAU,WAAWG,IAAI,UAC7C,yBAAKH,UAAU,YACf,8BAGE,6BACE,yBACEC,IAAKM,IACLP,UAAU,WACVG,IAAI,WACJK,QAASb,KAAKL,gBAGlB,6BACE,yBACEW,IAAKQ,IACLT,UAAU,aACVG,IAAI,aACJK,QAASb,KAAKN,mBALlB,IAMK,yBACHY,IAAKS,IACLV,UAAU,SACVG,IAAI,SACJK,QAASb,KAAKL,gBAGhB,6BACE,yBACEW,IAAKU,IACLX,UAAU,gBACVG,IAAI,gBACJK,QAASb,KAAKT,8B,GA3FZ0B,IAAMC,WCxDJC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.c74311fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.68941400.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.1afb4d81.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.1de5a5ab.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.65daff72.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.052bf42a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.6d05d844.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.349c13ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.d85c1560.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.09b0ea44.jpg\";","module.exports = __webpack_public_path__ + \"static/media/PixelPc.0dcf6391.png\";","module.exports = __webpack_public_path__ + \"static/media/PixelCup.1fc83413.png\";","module.exports = __webpack_public_path__ + \"static/media/Plant.e2863743.gif\";","module.exports = __webpack_public_path__ + \"static/media/paris_evening.153bd30c.gif\";","module.exports = __webpack_public_path__ + \"static/media/CVlogo.44fbc951.png\";","module.exports = __webpack_public_path__ + \"static/media/LinkedIn.113edd03.png\";","module.exports = __webpack_public_path__ + \"static/media/gitHubLogo.e070b249.png\";","module.exports = __webpack_public_path__ + \"static/media/instagramLogo.2bb9fced.png\";","import React from \"react\";\nimport logo1 from \"./assets/walkingVector/0.jpg\";\nimport logo2 from \"./assets/walkingVector/1.jpg\";\nimport logo3 from \"./assets/walkingVector/2.jpg\";\nimport logo4 from \"./assets/walkingVector/3.jpg\";\nimport logo5 from \"./assets/walkingVector/4.jpg\";\nimport logo6 from \"./assets/walkingVector/5.jpg\";\nimport logo7 from \"./assets/walkingVector/6.jpg\";\nimport logo8 from \"./assets/walkingVector/7.jpg\";\nimport logo9 from \"./assets/walkingVector/8.jpg\";\nimport pixelPc from \"./assets/PixelPc.png\";\nimport pixelCup from \"./assets/PixelCup.png\";\nimport plant from \"./assets/Plant.gif\";\nimport outSide from \"./assets/paris_evening.gif\";\nimport cvlogo from \"./assets/CVlogo.png\";\nimport LinkedIn from \"./assets/LinkedIn.png\";\nimport gitHubLogo from \"./assets/gitHubLogo.png\";\nimport instagramLogo from \"./assets/instagramLogo.png\";\n\nimport \"./App.css\";\n\nvar countAvatar = 1;\nvar avatarSrcAll = [\n  logo1,\n  logo2,\n  logo3,\n  logo4,\n  logo5,\n  logo6,\n  logo7,\n  logo8,\n  logo9,\n];\nvar avatarSrc = logo1;\n// function List() {\n//   if (!countAvatar) {\n//     return null;\n//   }\n\n//   if (countAvatar === 1) {\n//     return <img src={logo1} className=\"App-logo\" alt=\"logo\" />;\n//   }\n//   if (countAvatar === 2) {\n//     return <img src={logo2} className=\"App-logo\" alt=\"logo\" />;\n//   }\n//   if (countAvatar === 3) {\n//     return <img src={logo3} className=\"App-logo\" alt=\"logo\" />;\n//   }\n//   if (countAvatar === 4) {\n//     return <img src={logo4} className=\"App-logo\" alt=\"logo\" />;\n//   }\n//   if (countAvatar === 5) {\n//     return <img src={logo5} className=\"App-logo\" alt=\"logo\" />;\n//   }\n//   if (countAvatar === 6) {\n//     return <img src={logo6} className=\"App-logo\" alt=\"logo\" />;\n//   }\n//   if (countAvatar === 7) {\n//     return <img src={logo7} className=\"App-logo\" alt=\"logo\" />;\n//   }\n//   if (countAvatar === 8) {\n//     return <img src={logo8} className=\"App-logo\" alt=\"logo\" />;\n//   }\n//   if (countAvatar === 9) {\n//     return <img src={logo9} className=\"App-logo\" alt=\"logo\" />;\n//   }\n// }\n\nclass App extends React.Component<{}, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      avatarState: true,\n    };\n  }\n  tick() {\n    console.log(avatarSrc);\n    this.setState({ avatarState: false });\n    avatarSrc = avatarSrcAll[countAvatar];\n    ++countAvatar;\n    if (countAvatar > 8) {\n      countAvatar = 2;\n    }\n  }\n\n  componentDidMount() {\n    setInterval(() => this.tick(), 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval();\n  }\n  instagramImageClick = () => {\n    window.open(\"https://www.instagram.com/tmilost/\", \"_blank\");\n  };\n\n  gitHubImageClick = () => {\n    window.open(\"https://github.com/tmilost\", \"_blank\");\n  };\n\n  linkedinLink = () => {\n    window.open(\n      \"https://www.linkedin.com/in/milos-terzic-a60709183/\",\n      \"_blank\"\n    );\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"mainDiv\">\n          <img src={outSide} className=\"outSide\" alt=\"plant\" />\n          {/* <div className=\"top\">\n          <div className=\"Frame\">\n            <img src={frame} className=\"frame\" alt=\"frame\" />\n          </div>\n          <div className=\"Avatar\">\n            <img src={avatarSrc} className=\"avatar\" alt=\"logo\" />\n\n            <p>\n              <b>\n                <code>Front-End Web Developer</code>\n              </b>\n            </p>\n          </div>\n        </div> */}\n\n          <img src={plant} className=\"plant\" alt=\"pixelPc\" />\n          <img src={pixelPc} className=\"pixelPc\" alt=\"pixelPc\" />\n          <img src={pixelCup} className=\"pixelCup\" alt=\"plant\" />\n          <div className=\"PcScreen\">\n          <div>\n             \n            </div>\n            <div>\n              <img\n                src={LinkedIn}\n                className=\"linkedIn\"\n                alt=\"LinkedIn\"\n                onClick={this.linkedinLink}\n              />\n            </div>\n            <div>\n              <img\n                src={gitHubLogo}\n                className=\"gitHubLogo\"\n                alt=\"gitHubLogo\"\n                onClick={this.gitHubImageClick}\n              /> <img\n              src={cvlogo}\n              className=\"cvlogo\"\n              alt=\"cvlogo\"\n              onClick={this.linkedinLink}\n            />\n            </div>\n            <div>\n              <img\n                src={instagramLogo}\n                className=\"instagramLogo\"\n                alt=\"instagramLogo\"\n                onClick={this.instagramImageClick}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}